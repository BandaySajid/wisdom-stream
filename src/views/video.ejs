<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Watching</title>
    <!-- CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://kit.fontawesome.com/c33c910392.js" crossorigin="anonymous"></script>

    <script src="player_ui.js"></script>
    <link rel="stylesheet" href="player_ui.css">
</head>

<body>
    <div class="alert alert-success alert-dismissible fade hide" role="alert">
        <strong>Link Copied!</strong> Your link has been copied to clipboard.
        <button type="button" class="close" data-dismiss="alert" aria-label="Close">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
    <div class="d-flex justify-content-center align-items-center">
        <div class="container mt-5">
            <div class="d-flex justify-content-center">
                <!-- <div class="col-md-8 p-4">
                    <video id='video-content' class="video-js vjs-default-skin embed-responsive embed-responsive-16by9"
                        width="400" height="300" controls>
                        <source class="video_source" type="application/x-mpegURL" src="<%- contentUrl %>">

                    </video>
                </div> -->
                <div class="main">
                    <div data-shaka-player-container class="video-container"
                        data-shaka-player-cast-receiver-id="07AEE832">
                        <video data-shaka-player id="video" style="width:100%;height:100%">

                        </video>
                    </div>
                    <div class="error"></div>
                </div>
            </div>
            <div class="mt-3 text-center">
                <i class="fa fa-eye text-success"></i> : <span class="clients_length"></span>
                <div class="container col-md-8 text-center null-controls">
                    <p>URL: <a class="room-url"></a> <br> <i class="fa fa-clipboard clip_button"
                            style="cursor: pointer; display: none;" onclick="copy_to_clipboard(event)"></i></p>
                    <button id="create-room" class="btn btn-primary mr-2">Create Room</button>
                    <!-- <button id="join-room" class="btn btn-success">Join Room</button> -->
                </div>
            </div>
        </div>
    </div>


    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.2/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <script>
        const protocol = window.location.protocol.split(':')[0];
        const ws = new WebSocket(`${protocol === 'http' ? 'ws' : 'wss'}://${window.location.hostname}:${protocol === 'http' ? 9090 : ''}`);
        const this_url = new URL(location.href);
        const is_joinee = this_url.searchParams.has('room');

        ws.onopen = () => {
            if (is_joinee) {
                const null_controls = document.querySelector('.null-controls');
                null_controls.style.display = 'none';

                const room_id = this_url.searchParams.get('room');
                ws.send(JSON.stringify({
                    type: 'join',
                    room: {
                        name: room_id
                    }
                }));
            };
        }

        const get_final_url = async (url) => {
            const proxied_url = 'https://corsproxy.io/?' + encodeURIComponent(url);


            const response = await fetch(proxied_url);
            const html = await response.text();


            // Use regular expressions to extract the contentUrl value
            const pattern = /"contentUrl":"(https:\/\/[^"]+)"/;
            const matches = html.match(pattern);

            // Check if the contentUrl is found
            if (matches && matches[1]) {
                const contentUrl = matches[1];

                return contentUrl;
            } else {
                return null
            }
        };


        let manifestUri = '';

        async function init() {
            const video = document.getElementById('video');
            const ui = video['ui'];
            const controls = ui.getControls();
            const player = controls.getPlayer();

            // document.addEventListener('click', function () {
            //     video.play().catch(function (error) {
            //         console.error('Autoplay was prevented: ', error);
            //     });
            // });

            const joinee_config = ['picture_in_picture', 'spacer', 'quality', 'mute', 'fullscreen']
            const host_config = ['play_pause', 'rewind', 'picture_in_picture', 'spacer', 'quality', 'mute', 'fullscreen']


            const ui_config = {
                'controlPanelElements': is_joinee ? joinee_config : host_config,
                addSeekBar: is_joinee ? false : true,
                enableKeyboardPlaybackControls: is_joinee ? false : true
            };

            ui.configure(ui_config);
            player.configure({
                abr: {
                    enabled: false
                }
            })

            window.player = player;
            window.ui = ui;


            // Listen for error events.
            player.addEventListener('error', onPlayerErrorEvent);
            controls.addEventListener('error', onUIErrorEvent);

            try {
                if (!is_joinee) {
                    const this_url = new URL(location.href);
                    const url_params = this_url.searchParams;
                    const u = url_params.get('u') && parseInt(url_params.get('u'));
                    const local_store = localStorage.getItem('urls');
                    if (local_store) {
                        const stored_urls = JSON.parse(local_store).urls;
                        const usable_url = stored_urls[u].url;
                        const final_url = await get_final_url(usable_url);
                        manifestUri = final_url
                    }
                } else {
                    manifestUri = '<%- contentUrl %>';
                }

                // var player = videojs('video-content');
                // player.qualityLevels();

                await player.load(manifestUri);

                window.video = video;

                const track = player.getVariantTracks();
                window.player.selectVariantTrack(track, true);
                // This runs if the asynchronous load is successful.
                console.log('The video has now been loaded!');
                const player_controls_elem = document.querySelector('.shaka-controls-button-panel');

                video.addEventListener('play', (event) => {
                    ws.send(JSON.stringify({
                        type: 'controls',
                        currentTime: window.video.currentTime,
                        control: 'resume'
                    }));
                });

                video.addEventListener('pause', () => {
                    ws.send(JSON.stringify({
                        type: 'controls',
                        currentTime: window.video.currentTime,
                        control: 'pause'
                    }));
                });

                video.addEventListener('seeking', (event) => {
                    ws.send(JSON.stringify({
                        type: 'controls',
                        currentTime: window.video.currentTime,
                        control: 'timestamp'
                    }));
                });



            } catch (error) {
                onPlayerError(error);
            }
        }

        document.addEventListener('shaka-ui-loaded', init);
        function onPlayerErrorEvent(errorEvent) {
            onPlayerError(event.detail);
        }

        function onPlayerError(error) {
            console.error('Error code', error.code, 'object', error);
        }

        function onUIErrorEvent(errorEvent) {
            onPlayerError(event.detail);
        }

        function initFailed(errorEvent) {
            console.error('Unable to load the UI library!');
        }

        document.addEventListener('shaka-ui-load-failed', initFailed);

        const copy_to_clipboard = () => {
            navigator.clipboard.writeText(document.querySelector('.room-url').textContent)
            document.querySelector('.alert').classList.replace('hide', 'show')
        }


        const host_btn = document.querySelector('#create-room');
        const join_btn = document.querySelector('#join-room');

        host_btn.addEventListener('click', (event) => {
            ws.send(JSON.stringify({
                type: 'host',
                room: {
                    movie_url: manifestUri
                }
            }));
        });

        ws.onmessage = (wsMsg) => {
            try {
                const msg = JSON.parse(wsMsg.data);
                if (msg.type === 'url') {
                    const room_url_elem = document.querySelector('.room-url');
                    room_url_elem.textContent = msg.room.url;

                    host_btn.style.display = 'none';

                    const clip_button = document.querySelector('.clip_button');
                    clip_button.style.display = 'block'
                };
                if (msg.type === 'controls') {
                    if (msg.control === 'pause') {
                        window.video.pause();
                    } else if (msg.control === 'resume') {
                        window.video.play();
                        window.video.currentTime = msg.currentTime || 0;
                    }
                    else if (msg.control === 'timestamp') {
                        window.video.currentTime = msg.currentTime;
                    }
                }
                if (msg.type === 'connection') {
                    document.querySelector('.clients_length').textContent = msg.clients.length;
                };
                if (msg.type === 'closed') {
                    location.reload();
                };
            } catch (error) {
                //invalid json
                console.error('invalid json to parse!', error);
            };
        }
    </script>

</body>

</html>